# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Comment {
  created_date: DateTime!
  id: ID!
  text: String!
  ticket: Ticket!
  updated_date: DateTime!
  user: User!
}

input CreateCommentInput {
  text: String!
}

input CreateProjectInput {
  description: String
  due_at: DateTime
  name: String!
  status: String!
}

input CreateTicketInput {
  description: String!
  due_date: DateTime!
  estimated_time: Int!
  priority: String!
  spent_time: Int!
  status: String!
  title: String!
}

input Credentials {
  email: String!
  password: String!
}

# The javascript `Date` as string. Type represents date and time as the ISO Date string.
scalar DateTime

type Mutation {
  createComment(commentInput: CreateCommentInput!, ticketId: String!, userId: String!): Comment!
  createProject(membersIds: [String!]!, ownerId: String!, projectInput: CreateProjectInput!): Project!
  createTicket(membersIds: [String!]!, projectId: String!, ticket: CreateTicketInput!): Ticket!
  deleteComment(id: String!): Boolean!
  deleteTicket(id: String!): Boolean!
  deleteUser(id: String!): Boolean!
  registerUser(userInput: RegisterUserInput!): User!
  signin(credentials: Credentials!): String!
  updateComment(commentInput: UpdateCommentInput!): Comment!
  updatePassword(id: String!, password: String!): Boolean!
  updateProject(projectInput: UpdateProjectInput!): Project!
  updateTicket(ticketInput: UpdateTicketInput!): Ticket!
  updateUser(userInput: UpdateUserInput!): User!
  updateUsersFromProject(id: String!, userId: String!): Project!
  updateUsersFromTicket(id: String!, userId: String!): Ticket!
}

type Project {
  created_at: DateTime!
  delivered_at: DateTime
  description: String
  due_at: DateTime
  id: ID!
  members: [User!]
  name: String!
  owner: User
  status: String!
}

type Query {
  getAllComments: [Comment!]!
  getAllCommentsByTicket(id: String!): [Comment!]!
  getAllProjects: [Project!]!
  getAllTickets: [Ticket!]!
  getAllTicketsByProject(id: String!): [Ticket!]!
  getAllTicketsByUser(id: String!): [Ticket!]!
  getAllUsers: [User!]!
  getOneComment(id: String!): Comment!
  getOneProject(id: String!): Project!
  getOneTicket(id: String!): Ticket!
  getOneUser(id: String!): User!
  getProfile: User!
}

input RegisterUserInput {
  email: String!
  firstname: String!
  job_title: String!
  lastname: String!
  password: String!
}

type Ticket {
  created_at: DateTime!
  created_by: User!
  description: String
  due_date: DateTime!
  estimated_time: Int!
  id: ID!
  priority: String!
  project: Project!
  spent_time: Int
  status: String!
  title: String!
  users: [User!]!
}

input UpdateCommentInput {
  id: ID!
  text: String!
}

input UpdateProjectInput {
  delivered_at: DateTime
  description: String
  due_at: DateTime
  id: ID!
  name: String!
  status: String!
}

input UpdateTicketInput {
  description: String
  due_date: DateTime
  estimated_time: Int
  id: ID!
  priority: String
  spent_time: Int
  status: String
  title: String
}

input UpdateUserInput {
  email: String
  firstname: String
  id: ID!
  job_title: String
  lastname: String
  password: String
}

type User {
  averageTimePerTicket: Float!
  email: String!
  firstname: String!
  id: ID!
  job_title: String!
  lastname: String!
  password: String!
  projects: [Project!]!
  role: Float!
  tickets: [Ticket!]!
}
